package cmd

import (
	"bufio"
	"context"
	"fmt"
	"golang.org/x/crypto/ssh/terminal"
	"os"
	"strings"

	"github.com/urfave/cli/v2"

	"github.com/ppxl/harbor-cve-finder/pkg/core"
	"github.com/ppxl/harbor-cve-finder/pkg/service"
)

const (
	flagAnalyzeEndpoint                 = "endpoint"
	flagAnalyzeEndpointShort            = "e"
	flagFindPackageExpression           = "package"
	flagFindPackageExpressionShort      = "p"
	flagPasswordViaEnvVarNotViaTTY      = "no-password"
	flagPasswordViaEnvVarNotViaTTYShort = "N"
)

const (
	envVarHarborUsername = "HARBOR_USERNAME"
	envVarHarborPassword = "HARBOR_PASSWORD"
)

// credentialReader reads username and password from console input.
type credentialReader interface {
	readUsername() (string, error)
	readPassword() (string, error)
}

// Analyze is a cmd entrypoint.
var Analyze = &cli.Command{
	Name:        "find",
	Usage:       "find trivy reports in harbor",
	Description: "find trivy reports in harbor",
	Action:      findTrivyReportsCli,
	ArgsUsage:   "-e <https://registryUrl> -p <package substring>",
	Flags: []cli.Flag{
		&cli.StringFlag{
			Name:    flagAnalyzeEndpoint,
			Aliases: []string{flagAnalyzeEndpointShort},
			Usage:   "the Harbor endpoint URL, mandatory",
		},
		&cli.StringFlag{
			Name:    flagFindPackageExpression,
			Aliases: []string{flagFindPackageExpressionShort},
			Usage:   "package substring: f. i. netty finds reports about io.netty:netty-codec-http, optional",
		},
		&cli.BoolFlag{
			Name:    flagPasswordViaEnvVarNotViaTTY,
			Aliases: []string{flagPasswordViaEnvVarNotViaTTYShort},
			Usage:   "do not ask for credentials, take them from the environment variables $HARBOR_USERNAME and $HARBOR_PASSWORD, optional",
			Value:   false,
		},
	},
}

// findTrivyReports does things
func findTrivyReportsCli(cliCtx *cli.Context) error {
	if cliCtx.Args().Len() > 0 {
		_ = cli.ShowAppHelp(cliCtx)
		return fmt.Errorf("too many arguments")
	}

	readCredentialsFromTTY := !cliCtx.Bool(flagPasswordViaEnvVarNotViaTTY)

	creds, err := getCredentials(&loginReader{}, readCredentialsFromTTY)
	if err != nil {
		return err
	}

	packageExpr := cliCtx.String(flagFindPackageExpression)
	harborURL := cliCtx.String(flagAnalyzeEndpoint)

	args := core.FindArgs{Credentials: creds, HarborURL: harborURL, PackageExpression: packageExpr}

	return findTrivyReports(cliCtx.Context, args)
}

func findTrivyReports(ctx context.Context, args core.FindArgs) error {
	projSum, err := service.New(args).GetProjectInfo(ctx)
	if err != nil {
		return fmt.Errorf("failed to collect project data: %w", err)
	}
	fmt.Printf("%#v\n", projSum)

	return nil
}

func getCredentials(ttyReader credentialReader, readCredentialsFromTTY bool) (*core.HarborCredentials, error) {
	username := os.Getenv(envVarHarborUsername)
	password := os.Getenv(envVarHarborPassword)
	var err error

	if readCredentialsFromTTY {
		username, err = ttyReader.readUsername()
		if err != nil {
			return nil, fmt.Errorf("failed to read username: %w", err)
		}

		password, err = ttyReader.readPassword()
		if err != nil {
			return nil, fmt.Errorf("failed to get password: %w", err)
		}
	}

	return &core.HarborCredentials{
		Username: username,
		Password: password,
	}, nil
}

type loginReader struct{}

func (*loginReader) readUsername() (string, error) {
	fmt.Print("\nUsername: ")

	reader := bufio.NewReader(os.Stdin)
	username, err := reader.ReadString('\n')
	if err != nil {
		return "", fmt.Errorf("failed to read username: %w", err)
	}

	return strings.TrimSpace(username), nil
}

// readPassword reads the password, but no characters are displayed for added security.
func (*loginReader) readPassword() (string, error) {
	fmt.Print("Password: ")

	stdInFileHandle := 0
	bytePassword, err := terminal.ReadPassword(stdInFileHandle)
	if err != nil {
		return "", fmt.Errorf("failed to read password: %w", err)
	}

	fmt.Println()

	return string(bytePassword), nil
}
